// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
	"github.com/wahyusahajaa/mulo-api-go/app/config"
	"github.com/wahyusahajaa/mulo-api-go/app/database"
	"github.com/wahyusahajaa/mulo-api-go/app/handlers"
	"github.com/wahyusahajaa/mulo-api-go/app/middlewares"
	"github.com/wahyusahajaa/mulo-api-go/app/repositories"
	"github.com/wahyusahajaa/mulo-api-go/app/routers"
	"github.com/wahyusahajaa/mulo-api-go/app/services"
	"github.com/wahyusahajaa/mulo-api-go/pkg/logger"
	"github.com/wahyusahajaa/mulo-api-go/pkg/utils"
)

// Injectors from wire.go:

func InitializedApp() (*AppContainer, error) {
	configConfig := config.NewConfig()
	db, err := database.NewDB(configConfig)
	if err != nil {
		return nil, err
	}
	logrusLogger := logger.NewLogger()
	authRepository := repositories.NewAuthRepository(db, logrusLogger)
	authService := services.NewAuthService(authRepository, logrusLogger)
	jwtService := utils.NewJWTService(configConfig)
	resendService := utils.NewResendService(configConfig)
	verificationService := utils.NewVerification(authRepository)
	authHandler := handlers.NewAuthHandler(authService, jwtService, resendService, verificationService, logrusLogger)
	authMiddleware := middlewares.NewAuthMiddleware(jwtService)
	userRepository := repositories.NewUserRepository(db, logrusLogger)
	userService := services.NewUserService(userRepository, logrusLogger)
	userHandler := handlers.NewUserHandler(userService)
	artistRepository := repositories.NewArtistRepository(db, logrusLogger)
	artistService := services.NewArtistService(artistRepository, logrusLogger)
	artistHandler := handlers.NewArtistHandler(artistService, logrusLogger)
	albumRepository := repositories.NewAlbumRepository(db, logrusLogger)
	albumService := services.NewAlbumService(albumRepository, logrusLogger)
	albumHandler := handlers.NewAlbumHandler(albumService, artistService, logrusLogger)
	songRepository := repositories.NewSongRepository(db, logrusLogger)
	songService := services.NewSongService(songRepository, albumRepository, logrusLogger)
	songHandler := handlers.NewSongHandler(songService, logrusLogger)
	genreRepository := repositories.NewGenreRepository(db, logrusLogger)
	genreService := services.NewGenreService(genreRepository, logrusLogger)
	genreHandler := handlers.NewGenreHandler(genreService, logrusLogger)
	playlistRepository := repositories.NewPlaylistRepository(db, logrusLogger)
	playlistService := services.NewPlaylistService(playlistRepository, logrusLogger)
	playlistHandler := handlers.NewPlaylistHandler(playlistService, logrusLogger)
	handlersHandlers := handlers.NewHandlers(authHandler, authMiddleware, userHandler, artistHandler, albumHandler, songHandler, genreHandler, playlistHandler)
	v := middlewares.FiberLogger(logrusLogger)
	app := routers.ProviderFiberApp(handlersHandlers, v)
	appContainer := &AppContainer{
		App:    app,
		Config: configConfig,
	}
	return appContainer, nil
}

// wire.go:

type AppContainer struct {
	App    *fiber.App
	Config *config.Config
}

var authSet = wire.NewSet(utils.NewJWTService, utils.NewResendService, repositories.NewAuthRepository, services.NewAuthService, utils.NewVerification, handlers.NewAuthHandler)

var userSet = wire.NewSet(repositories.NewUserRepository, services.NewUserService, handlers.NewUserHandler)

var artistSet = wire.NewSet(repositories.NewArtistRepository, services.NewArtistService, handlers.NewArtistHandler)

var albumSet = wire.NewSet(repositories.NewAlbumRepository, services.NewAlbumService, handlers.NewAlbumHandler)

var songSet = wire.NewSet(repositories.NewSongRepository, services.NewSongService, handlers.NewSongHandler)

var genreSet = wire.NewSet(repositories.NewGenreRepository, services.NewGenreService, handlers.NewGenreHandler)

var playlistSet = wire.NewSet(repositories.NewPlaylistRepository, services.NewPlaylistService, handlers.NewPlaylistHandler)
