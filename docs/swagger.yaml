basePath: /v1
definitions:
  Album:
    properties:
      id:
        type: integer
      image:
        $ref: '#/definitions/Image'
      name:
        type: string
      slug:
        type: string
    type: object
  AlbumWithArtist:
    properties:
      artist:
        $ref: '#/definitions/Artist'
      id:
        type: integer
      image:
        $ref: '#/definitions/Image'
      name:
        type: string
      slug:
        type: string
    type: object
  Artist:
    properties:
      id:
        type: integer
      image:
        $ref: '#/definitions/Image'
      name:
        type: string
      slug:
        type: string
    type: object
  CreateAlbumRequest:
    properties:
      artist_id:
        type: integer
      image:
        $ref: '#/definitions/Image'
      name:
        type: string
    required:
    - artist_id
    - image
    - name
    type: object
  CreateArtistRequest:
    properties:
      image:
        $ref: '#/definitions/Image'
      name:
        type: string
    required:
    - image
    - name
    type: object
  CreateGenreRequest:
    properties:
      image:
        $ref: '#/definitions/Image'
      name:
        type: string
    required:
    - image
    - name
    type: object
  CreatePlaylistRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  CreateSongRequest:
    properties:
      album_id:
        type: integer
      audio:
        type: string
      duration:
        type: integer
      image:
        $ref: '#/definitions/Image'
      title:
        minLength: 1
        type: string
    required:
    - album_id
    - audio
    - duration
    - image
    - title
    type: object
  CreateUserInput:
    properties:
      full_name:
        type: string
      image:
        $ref: '#/definitions/Image'
    required:
    - full_name
    type: object
  ErrorResponse:
    properties:
      message:
        type: string
    type: object
  Genre:
    properties:
      id:
        type: integer
      image:
        $ref: '#/definitions/Image'
      name:
        type: string
    type: object
  GithubReq:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  Image:
    properties:
      blur_hash:
        type: string
      src:
        type: string
    type: object
  InternalErrorResponse:
    properties:
      message:
        example: Internal server error
        type: string
      request_id:
        example: abcd-1234
        type: string
    type: object
  LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  Pagination:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
    type: object
  Playlist:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - full_name
    - password
    - username
    type: object
  ResendVerificationRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  ResponseError:
    properties:
      message:
        type: string
    type: object
  ResponseMessage:
    properties:
      message:
        type: string
    type: object
  ResponseWithData-Album:
    properties:
      data:
        $ref: '#/definitions/Album'
    type: object
  ResponseWithData-Artist:
    properties:
      data:
        $ref: '#/definitions/Artist'
    type: object
  ResponseWithData-Genre:
    properties:
      data:
        $ref: '#/definitions/Genre'
    type: object
  ResponseWithData-Playlist:
    properties:
      data:
        $ref: '#/definitions/Playlist'
    type: object
  ResponseWithData-Song:
    properties:
      data:
        $ref: '#/definitions/Song'
    type: object
  ResponseWithData-User:
    properties:
      data:
        $ref: '#/definitions/User'
    type: object
  ResponseWithData-any:
    properties:
      data: {}
    type: object
  ResponseWithData-array_Album:
    properties:
      data:
        items:
          $ref: '#/definitions/Album'
        type: array
    type: object
  ResponseWithData-array_Genre:
    properties:
      data:
        items:
          $ref: '#/definitions/Genre'
        type: array
    type: object
  ResponseWithData-array_Song:
    properties:
      data:
        items:
          $ref: '#/definitions/Song'
        type: array
    type: object
  ResponseWithData-string-string:
    properties:
      access_token:
        type: string
      message:
        type: string
    type: object
  ResponseWithPagination-array_Album-Pagination:
    properties:
      data:
        items:
          $ref: '#/definitions/Album'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    type: object
  ResponseWithPagination-array_Artist-Pagination:
    properties:
      data:
        items:
          $ref: '#/definitions/Artist'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    type: object
  ResponseWithPagination-array_Genre-Pagination:
    properties:
      data:
        items:
          $ref: '#/definitions/Genre'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    type: object
  ResponseWithPagination-array_Playlist-Pagination:
    properties:
      data:
        items:
          $ref: '#/definitions/Playlist'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    type: object
  ResponseWithPagination-array_Song-Pagination:
    properties:
      data:
        items:
          $ref: '#/definitions/Song'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    type: object
  ResponseWithPagination-array_User-Pagination:
    properties:
      data:
        items:
          $ref: '#/definitions/User'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    type: object
  Song:
    properties:
      album:
        $ref: '#/definitions/AlbumWithArtist'
      audio:
        type: string
      duration:
        type: integer
      id:
        type: integer
      image:
        $ref: '#/definitions/Image'
      title:
        type: string
    type: object
  User:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      image:
        $ref: '#/definitions/Image'
      username:
        type: string
    type: object
  ValidationErrorResponse:
    properties:
      errors:
        description: optional
        type: object
      message:
        example: Validation failed
        type: string
    type: object
  VerifyRequest:
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
host: localhost:3000
info:
  contact:
    email: wahyusahaja.official@gmail.com
    name: The Developer
  description: This documentation for access Mulo Music Streaming
  title: Mulo Music Streaming API
  version: "1.0"
paths:
  /albums:
    get:
      description: Get paginated list of albums
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithPagination-array_Album-Pagination'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List Albums
      tags:
      - albums
    post:
      consumes:
      - application/json
      description: Create a new album.
      parameters:
      - description: Album object that needs to be created
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/CreateAlbumRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "409":
          description: Conflict album name
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Create album
      tags:
      - albums
  /albums/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the album with the specified ID
      parameters:
      - description: album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: 'Not Found: Album not found'
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete album
      tags:
      - albums
    get:
      description: Get a Album by their ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-Album'
        "404":
          description: Album not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Album by ID
      tags:
      - albums
    put:
      consumes:
      - application/json
      description: Update the album with the specified ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      - description: album object that needs to be updated
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/CreateAlbumRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: 'Not Found: album or artist not found'
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: 'Conflict: album name'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Update album
      tags:
      - albums
  /albums/{id}/songs:
    get:
      description: Get paginated list of songs by album
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithPagination-array_Song-Pagination'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List of Songs by album
      tags:
      - albums
  /artists:
    get:
      description: Get paginated list of artists
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithPagination-array_Artist-Pagination'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List of Artists
      tags:
      - artists
    post:
      consumes:
      - application/json
      description: Create a new artist.
      parameters:
      - description: artist object that needs to be created
        in: body
        name: artist
        required: true
        schema:
          $ref: '#/definitions/CreateArtistRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "409":
          description: Conflict artist name
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Create artist
      tags:
      - artists
  /artists/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the artist with the specified ID
      parameters:
      - description: artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: 'Not Found: artist not found'
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete artist
      tags:
      - artists
    get:
      description: Get a Artist by their ID
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-Artist'
        "404":
          description: Artist not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Artist by ID
      tags:
      - artists
    put:
      consumes:
      - application/json
      description: Update the artist with the specified ID
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      - description: artist object that needs to be updated
        in: body
        name: artist
        required: true
        schema:
          $ref: '#/definitions/CreateArtistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: 'Not Found: artist not found'
          schema:
            $ref: '#/definitions/ErrorResponse'
        "409":
          description: 'Conflict: artist name'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Update artist
      tags:
      - artists
  /artists/{id}/albums:
    get:
      description: Get list of albums by artist id
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-array_Album'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List of albums by artist
      tags:
      - artists
  /artists/{id}/genres:
    get:
      description: Get list of genres by artist id
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-array_Genre'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List of genres by artist
      tags:
      - artists
  /artists/{id}/genres/{genreId}:
    delete:
      consumes:
      - application/json
      description: Delete genre from artist
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      - description: Genre ID
        in: path
        name: genreId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: 'Not Found: Genre on artist does not exists.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete genre from artist
      tags:
      - artists
    post:
      consumes:
      - application/json
      description: Assign genre to artist
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      - description: Genre ID
        in: path
        name: genreId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: 'Not Found: Genre or artist does not exists.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "409":
          description: 'Conflict: Genre already exists on artist.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign genre to artist
      tags:
      - artists
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token if successful.
      parameters:
      - description: login object that needs to be created
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "403":
          description: Account not activated
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Remove refresh token from cookies and revoke session
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/ResponseMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Logout user
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Returns profile information of the currently authenticated user
        based on the provided JWT token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-User'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      summary: Get current authenticated user info
      tags:
      - auth
  /auth/oauth/github/callback:
    post:
      consumes:
      - application/json
      description: Handles the redirect from GitHub after OAuth login/signup and returns
        a JWT token if successful.
      parameters:
      - description: Authorization code received from GitHub redirect.
        in: body
        name: oauth
        required: true
        schema:
          $ref: '#/definitions/GithubReq'
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated successfully with GitHub
          schema:
            $ref: '#/definitions/ResponseWithData-string-string'
        "400":
          description: Invalid request or missing code
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: 'Unauthorized: Bad credentials'
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: 'Not Found: Github user does not exists'
          schema:
            $ref: '#/definitions/ResponseError'
        "408":
          description: 'Time Out: Fetching GitHub email timed out'
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: OAuth GitHub Callback
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a valid refresh token from cookies
      produces:
      - application/json
      responses:
        "200":
          description: New access token
          schema:
            $ref: '#/definitions/ResponseWithData-string-string'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account and sends a verification email.
      parameters:
      - description: register object that needs to be created
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "409":
          description: Username or email already exists.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /auth/resend-verification:
    post:
      consumes:
      - application/json
      description: Resends the verification code to the user's email if it hasn't
        been verified yet.
      parameters:
      - description: resend object that needs to be created
        in: body
        name: resend
        required: true
        schema:
          $ref: '#/definitions/ResendVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: Email does not exists.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "409":
          description: Email is already verified.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      summary: Resend email verification
      tags:
      - auth
  /auth/verification-status:
    get:
      consumes:
      - application/json
      description: Checks whether the user's email has been verified.
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-any'
        "404":
          description: Email does not exists.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      summary: Check email verification status
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Verifies the user's email address using a verification code.
      parameters:
      - description: verify object that needs to be created
        in: body
        name: verify
        required: true
        schema:
          $ref: '#/definitions/VerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: Email or Code does not exists.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "409":
          description: Email is already verified.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "410":
          description: Code has expired.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      summary: Verify user email
      tags:
      - auth
  /favorites/songs:
    get:
      description: Get paginated list of favorite songs
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithPagination-array_Song-Pagination'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List of favorite songs
      tags:
      - favorites
  /favorites/songs/{songId}:
    delete:
      consumes:
      - application/json
      description: Remove song from favorite
      parameters:
      - description: Song ID
        in: path
        name: songId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: 'Not Found: Song on favorites does not exists.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove song from favorite
      tags:
      - favorites
    post:
      consumes:
      - application/json
      description: Add song to favorite
      parameters:
      - description: Song ID
        in: path
        name: songId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: 'Not Found: Song does not exists.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "409":
          description: 'Conflict: Song already exists on favorites.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Add song to favorite
      tags:
      - favorites
  /genres:
    get:
      description: Get paginated list of genres
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithPagination-array_Genre-Pagination'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List Genres
      tags:
      - genres
    post:
      consumes:
      - application/json
      description: Create a new genre.
      parameters:
      - description: Genre object that needs to be created
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/CreateGenreRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Create genre
      tags:
      - genres
  /genres/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the genre with the specified ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: Genre not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete genre
      tags:
      - genres
    get:
      description: Get a Genre by their ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-Genre'
        "404":
          description: Genre not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Genre by ID
      tags:
      - genres
    put:
      consumes:
      - application/json
      description: Update the genre with the specified ID
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      - description: Genre object that needs to be updated
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/CreateGenreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: Genre not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Update genre
      tags:
      - genres
  /genres/{id}/artists:
    get:
      description: Get paginated list of artists by genre
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithPagination-array_Artist-Pagination'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List of artists by genre
      tags:
      - genres
  /genres/{id}/songs:
    get:
      description: Get paginated list of songs by genre
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithPagination-array_Song-Pagination'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List of songs by genre
      tags:
      - genres
  /ping:
    get:
      description: Returns pong
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health Check
      tags:
      - health
  /playlists:
    get:
      description: Get paginated list of playlists
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithPagination-array_Playlist-Pagination'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List of playlists
      tags:
      - playlists
    post:
      consumes:
      - application/json
      description: Create a new playlist.
      parameters:
      - description: Playlist object that needs to be created
        in: body
        name: playlist
        required: true
        schema:
          $ref: '#/definitions/CreatePlaylistRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Playlist
      tags:
      - playlists
  /playlists/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the playlist with the specified ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: Playlist not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete playlist
      tags:
      - playlists
    get:
      description: Get a playlist by their ID
      parameters:
      - description: Playlist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-Playlist'
        "404":
          description: Playlist not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Get playlist by ID
      tags:
      - playlists
    put:
      consumes:
      - application/json
      description: Update the playlist with the specified ID
      parameters:
      - description: Playlist ID
        in: path
        name: id
        required: true
        type: integer
      - description: Song object that needs to be updated
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/CreatePlaylistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: Playlist not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Update playlist
      tags:
      - playlists
  /playlists/{id}/songs:
    get:
      description: Get list of songs by playlist id.
      parameters:
      - description: Playlist ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-array_Song'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List of songs by playlist
      tags:
      - playlists
  /playlists/{id}/songs/{songId}:
    delete:
      consumes:
      - application/json
      description: Delete genre from playlist.
      parameters:
      - description: Playlist ID
        in: path
        name: id
        required: true
        type: integer
      - description: Song ID
        in: path
        name: songId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: 'Not Found: Song on playlist does not exists.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete song from playlist
      tags:
      - playlists
    post:
      consumes:
      - application/json
      description: Added song to playlist
      parameters:
      - description: Playlist ID
        in: path
        name: id
        required: true
        type: integer
      - description: Song ID
        in: path
        name: songId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: 'Not Found: Playlist or song does not exists.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "409":
          description: 'Conflict: Song already exists on playlist.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Added song to playlist
      tags:
      - playlists
  /songs:
    get:
      description: Get paginated list of songs
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithPagination-array_Song-Pagination'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List Songs
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Create a new song.
      parameters:
      - description: Song object that needs to be created
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/CreateSongRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Create song
      tags:
      - songs
  /songs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the song with the specified ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: Song not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete song
      tags:
      - songs
    get:
      description: Get a song by their ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-Song'
        "404":
          description: Song not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Get song by ID
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: Update the song with the specified ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Song object that needs to be updated
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/CreateSongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: Song not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Update song
      tags:
      - songs
  /songs/{id}/genres:
    get:
      description: Get paginated list of artists by genre
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-array_Genre'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List of genres by song
      tags:
      - songs
  /songs/{id}/genres/{genreId}:
    delete:
      consumes:
      - application/json
      description: Delete genre from song
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Genre ID
        in: path
        name: genreId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: 'Not Found: Genre on song does not exists.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete genre from song
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Assign genre to song
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Genre ID
        in: path
        name: genreId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: 'Not Found: Genre or song does not exists.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "409":
          description: 'Conflict: Genre already exists on song.'
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign genre to song
      tags:
      - songs
  /users:
    get:
      description: Get paginated list of users
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithPagination-array_User-Pagination'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: List Users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the user with the specified ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseWithData-User'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates the user with the specified ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User object that needs to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/CreateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseMessage'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/InternalErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Type: Bearer token'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
